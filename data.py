# def members_label(self, board_id):
#     members = TrelloManager(self.trello_username).get_board_members(board_id)
#     data = []
#     cur = connection.cursor(cursor_factory=RealDictCursor)
#     sql = 'CREATE TABLE if not exists members(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,' \
#           'full_name varchar(100)not null,trello_username varchar(100) unique not null,' \
#           'trello_id varchar(80)unique not null )  '
#     cur.execute(sql)
#     connection.commit()
#     cur.close()
#     for i in members:
#         curr = connection.cursor()
#         sql = 'insert into members(full_name,trello_username,trello_id)values (%s,%s,%s)' \
#               'on conflict (trello_id) do update set full_name = excluded.full_name'
#         curr.execute(sql, (i.get('fullName'), i.get('username'), i.get('id')))
#         connection.commit()
#         with connection.cursor() as m:
#             m.execute(f"select full_name,trello_id from members where trello_username ='{i['username']}'")
#             s = m.fetchall()
#             for row in s:
#                 data.append({
#                     'fullName': row[0],
#                     'id': row[1]
#                 })
#     cur = connection.cursor(cursor_factory=RealDictCursor)
#     sql = 'CREATE TABLE if not exists members_one(id int,cards_id int unique ,memberes_id int unique ,' \
#           'foreign key(cards_id)references cards(id),foreign key (memberes_id)references members(id))'
#     cur.execute(sql)
#     connection.commit()
#     cur.close()
#     con = connection.cursor()
#     sql = 'insert into members_one(cards_id)values (%s) on conflict (cards_id)do nothing '
#     con.execute('select id from cards')
#     name = con.fetchall()
#     for j in name:
#         con.execute(sql, (j))
#         connection.commit()
#     sql = 'insert into members_one(memberes_id)values (%s) on conflict (memberes_id)do update set memberes_id=excluded.memberes_id'
#     con.execute('select id from members')
#     name = con.fetchall()
#     for i in name:
#         con.execute(sql, (i))
#         connection.commit()
#     con.close()
#     return data
#
#
# def labels_trello(self, board_id):
#     label = TrelloManager(self.trello_username).get_label(board_id)
#
#     data = []
#     cur = connection.cursor(cursor_factory=RealDictCursor)
#     sql = "CREATE TABLE if not exists labels(id int generated by default as identity primary key," \
#           "label_name varchar(60)not null ,color varchar(50)," \
#           "label_id varchar(80) unique not null,board_id int references boards(id),board_d varchar(60)not null)"
#     cur.execute(sql)
#     connection.commit()
#     cur.close()
#     for i in label:
#         curr = connection.cursor()
#         sql = 'insert into labels(label_name, color, label_id,board_id,board_d)values (%s,%s,%s,%s,%s)on conflict (label_id)do update set label_name = excluded.label_name'
#         curr.execute(f"select id from boards where trello_id='{board_id}'")
#         name = curr.fetchall()
#         curr.execute(sql, (i.get('name'), i.get('color'), i.get('id'), name[0][0], i.get('idBoard')))
#         connection.commit()
#         curr.close()
#     with connection.cursor() as l:
#         l.execute(f"select label_name,label_id from labels where board_d ='{board_id}'")
#         s = l.fetchall()
#         for i in s:
#             data.append({
#                 'name': i[0],
#                 'id': i[1]
#
#             })
#     cards = connection.cursor()
#
#     con = 'CREATE TABLE if not exists cards_label(id int, card_id int unique ,label_id int unique ,' \
#           'foreign key (card_id)references cards(id),foreign key (label_id)references labels(id))'
#     cards.execute(con)
#     connection.commit()
#     cards.close()
#     con1 = connection.cursor()
#     card = 'insert into cards_label(card_id)values (%s) on conflict (card_id)do nothing '
#     con1.execute('select id from cards')
#     name = con1.fetchall()
#     for j in name:
#         con1.execute(card, (j))
#         connection.commit()
#     sql = 'insert into cards_label(label_id)values (%s) on conflict (label_id)do nothing '
#     con1.execute('select id from labels')
#     name = con1.fetchall()
#     for i in name:
#         con1.execute(sql, (i))
#         connection.commit()
#     con1.close()
#
#     return
from Trello.trello import TrelloManager

# s=TrelloManager('otabekismailov3'). get_cards_on_a_list('64039b9d36372f1c57dcd97f')
# print(s)
a = [{'id': '63ea227728ee0b875a66f2f5', 'fullName': 'otabek ismailov', 'username': 'otabekismailov3'}]
s = TrelloManager('otabekismailov3').get_cards_on_a_list('6404dc277428ce45a12d3102')
print(s)
b=[{'id': '640a66d11fd425cec3af9a55',
  'badges': {'attachmentsByType': {'trello': {'board': 0, 'card': 0}}, 'location': False, 'votes': 0,
             'viewingMemberVoted': False, 'subscribed': True, 'fogbugz': '', 'checkItems': 0, 'checkItemsChecked': 0,
             'checkItemsEarliestDue': None, 'comments': 0, 'attachments': 0, 'description': True,
             'due': '2023-10-20T00:00:00.000Z', 'dueComplete': False, 'start': None}, 'checkItemStates': None,
  'closed': False, 'dueComplete': False, 'dateLastActivity': '2023-03-09T23:08:01.189Z', 'desc': 'w',
  'descData': {'emoji': {}}, 'due': '2023-10-20T00:00:00.000Z', 'dueReminder': None, 'email': None,
  'idBoard': '64039b9d36372f1c57dcd97f', 'idChecklists': [], 'idList': '6404dc277428ce45a12d3102',
  'idMembers': ['63ea227728ee0b875a66f2f5'], 'idMembersVoted': [], 'idShort': 1, 'idAttachmentCover': None, 'labels': [
        {'id': '640a611ef0c2413f32ffe1e5', 'idBoard': '64039b9d36372f1c57dcd97f', 'name': 'erroo', 'color': 'green'}],
  'idLabels': ['640a611ef0c2413f32ffe1e5'], 'manualCoverAttachment': False, 'name': 'wqw', 'pos': 16384,
  'shortLink': 'CmlKo2cb', 'shortUrl': 'https://trello.com/c/CmlKo2cb', 'start': None, 'subscribed': True,
  'url': 'https://trello.com/c/CmlKo2cb/1-wqw',
  'cover': {'idAttachment': None, 'color': None, 'idUploadedBackground': None, 'size': 'normal', 'brightness': 'dark',
            'idPlugin': None}, 'isTemplate': False, 'cardRole': None}, {'id': '640a7bf732bdb1e7e28297fd', 'badges': {
    'attachmentsByType': {'trello': {'board': 0, 'card': 0}}, 'location': False, 'votes': 0,
    'viewingMemberVoted': False, 'subscribed': True, 'fogbugz': '', 'checkItems': 0, 'checkItemsChecked': 0,
    'checkItemsEarliestDue': None, 'comments': 0, 'attachments': 0, 'description': True,
    'due': '2024-02-22T00:00:00.000Z', 'dueComplete': False, 'start': None}, 'checkItemStates': None, 'closed': False,
                                                                        'dueComplete': False,
                                                                        'dateLastActivity': '2023-03-10T00:38:15.166Z',
                                                                        'desc': 'a', 'descData': {'emoji': {}},
                                                                        'due': '2024-02-22T00:00:00.000Z',
                                                                        'dueReminder': None, 'email': None,
                                                                        'idBoard': '64039b9d36372f1c57dcd97f',
                                                                        'idChecklists': [],
                                                                        'idList': '6404dc277428ce45a12d3102',
                                                                        'idMembers': ['63ea227728ee0b875a66f2f5'],
                                                                        'idMembersVoted': [], 'idShort': 2,
                                                                        'idAttachmentCover': None, 'labels': [
        {'id': '64039b9dadeea9016ade9641', 'idBoard': '64039b9d36372f1c57dcd97f', 'name': 'ng ggrfefe',
         'color': 'purple'}], 'idLabels': ['64039b9dadeea9016ade9641'], 'manualCoverAttachment': False, 'name': 'sd',
                                                                        'pos': 32768, 'shortLink': 'rQp4wXif',
                                                                        'shortUrl': 'https://trello.com/c/rQp4wXif',
                                                                        'start': None, 'subscribed': True,
                                                                        'url': 'https://trello.com/c/rQp4wXif/2-sd',
                                                                        'cover': {'idAttachment': None, 'color': None,
                                                                                  'idUploadedBackground': None,
                                                                                  'size': 'normal',
                                                                                  'brightness': 'dark',
                                                                                  'idPlugin': None},
                                                                        'isTemplate': False, 'cardRole': None}]
